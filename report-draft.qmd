---
title: "Report draft"
author:
  - Author 1
  - Author 2
  - Author 3
date: "July 25, 2025"
toc: true
format:
  html:
    theme: cosmo
    html-math-method: katex
    self-contained: true
execute:
  echo: false
  warning: false
  message: false
---

---

## Introduction 

Describe the problem and why it is important.

## Data

Describe the data you’re using in detail, where you accessed it, along with relevant exploratory data analysis (EDA). You should also include descriptions of any relevant data pre-processing steps (e.g., whether you consider specific observations, create any meaningful features, etc.---but don't mention minor steps like column type conversion, filtering out unnecessary rows)

```{r}
# loading in the data
#| echo: false
#| echo: false
#| warning: false
#| results: false
library(dplyr)
library(janitor)
library(lubridate)
library(readr)
library(stringr)
library(stringi) 
library(tidyverse)
library(ggrepel)
library(scales)

# loading the data
model_df <- read_csv("salary_model_df.csv")
model_df_scaled <- read_csv("model_df_scaled.csv")
eda_df <- read_csv("eda_df.csv")
```

### EDA
# PER / Salary EDA plot 
```{r}
#| echo: false
#| warning: false


#### PER / Salary EDA scatterplot: 

# Define the nine star players to highlight
star_players <- c(
  "caitlin clark", "arike ogunbowale", "a'ja wilson",
  "breanna stewart", "aliyah boston", "sabrina ionescu",
  "napheesa collier", "paige bueckers", "kelsey plum"
)

# Filter the data for labeling
star_df <- eda_df %>% filter(player %in% star_players)

star_df <-star_df <- star_df %>%
  mutate(
    nudge_x = case_when(
      player == "arike ogunbowale"  ~ -2,
      player == "paige bueckers"    ~ 10,
      player == "kelsey plum"       ~ -20,
      TRUE                         ~ 0
    ),
    nudge_y = case_when(
      player == "arike ogunbowale"  ~ -5,
      player == "sabrina ionescu"   ~ 10,
      player == "napheesa collier"  ~ -5,
      player == "paige bueckers"    ~ 30,
      player == "kelsey plum"       ~ 10,
      TRUE                         ~ 0
    )
  )

ggplot(eda_df, aes(x = per, y = salary_clean)) +
  # Highlight rookie salary range
  annotate("rect",
           xmin = -Inf, xmax = Inf,
           ymin = 66000, ymax = 78000,
           fill = "red", alpha = 0.15) +
  # Base scatter
  geom_point(alpha = 0.7, size = 3, color = "#1f78b4") +
  geom_label_repel(
    data = star_df,
    aes(label = player),
    size = 3.5,
    box.padding = 0.3,
    point.padding = 0.2,
    segment.color = "gray50",
    segment.size = 0.7,
    min.segment.length = 0,
    direction = "y", # prefer vertical adjustment to avoid overlap
    alpha = 0.7
  ) +
  #Lines at key salary thresholds
  geom_hline(yintercept = 66000,  linetype = "dashed", color = "red", alpha = 0.5) +
  geom_hline(yintercept = 78000,  linetype = "dashed", color = "red", alpha = 0.5) +
  geom_hline(yintercept = 214000, linetype = "dashed", color = "green") +
  geom_hline(yintercept = 250000, linetype = "dashed", color = "blue") +
  labs(
    title = "Identifying Who May be Outpreforming Their Salary",
    x = "Player Efficiency Rating (PER)",
    y = "Salary (USD)",
  ) +
  scale_y_continuous(labels = dollar_format(),
                     breaks = seq(0, 300000, by = 40000)) +
  scale_x_continuous(breaks = seq(0, max(eda_df$per), by = 5),
                     limits = c(0, max(eda_df$per) + 5 )) +
  theme_classic(base_size = 14) +
  theme(
    plot.title = element_text(face = "bold", size = 18),
    plot.subtitle = element_text(size = 12, margin = margin(b = 10)),
    axis.title = element_text(face = "bold")
  )
```


# shiny app:
```{r, context="shiny"}
#| echo: false
#| warning: false
 
library(shiny)

draft_ranking <- read.csv("draft_ranking.csv")

ui <- fluidPage(
  tagList(
    tags$h3(
      "2026 WNBA Expansion Draft Predicted Protection Status",
      style = "margin-bottom: 5px; font-weight: bold;"
    ),
    tags$h5(
      "Last update: July 2025",
      style = "margin-top: 0; color: gray;"
    )
  ),
  sidebarLayout(
    sidebarPanel(
      selectInput(
        inputId = "team_choice",
        label = "Select a Team:",
        choices = sort(unique(draft_ranking$team.x)),
        selected = sort(unique(draft_ranking$team.x))[1]
      )
    ),
    mainPanel(
      uiOutput("protection_table")
    )
  )
)


# Server
server <- function(input, output) {
  
  # Reactive filtered and cleaned data
  filtered_data <- reactive({
    draft_ranking %>%
      filter(team.x == input$team_choice) %>%
      mutate(
        player = str_to_title(player)  # Capitalize player names
      )
  })
  
  # Render two side-by-side tables
  output$protection_table <- renderUI({
    fluidRow(
      column(
        width = 6,
        h4("✅  Likely Protected Players"),
        tableOutput("protected_table")
      ),
      column(
        width = 6,
        h4("❌ Unprotected Players"),
        tableOutput("unprotected_table")
      )
    )
  })
  
  output$protected_table <- renderTable({
    filtered_data() %>%
      filter(protected == 1) %>%
      mutate(age = as.integer(age)) %>%
      select(Player = player, Position = pos, Age = age)
  })
  
  output$unprotected_table <- renderTable({
    filtered_data() %>%
      filter(protected == 0) %>%
      mutate(age = as.integer(age)) %>%
      select(Player = player, Position = pos, Age = age)
  })
  
}

# Run the app
shinyApp(ui = ui, server = server)
```


```{r}
#| echo: false
#| results: false


library(readr)  
positional_df <- model_df |>
  mutate(
    actual = parse_number(actual),
    xgb_pred = parse_number(xgb_pred),
    residual = xgb_pred - actual,
    pos_group = case_when(
      str_detect(pos, "G") ~ "G",
      str_detect(pos, "F") ~ "F",
      str_detect(pos, "C") ~ "C",
      TRUE ~ "Other"
    )
  ) |>
  filter(residual > 0) |>
  mutate(
    across(c(actual, xgb_pred, residual), scales::dollar_format())
  )

ranked_df <- read_csv("players_ranked_salary_ufa.csv")

ranked_pos_df <- ranked_df|>
  mutate(
    actual = parse_number(actual),
    xgb_pred = parse_number(xgb_pred),
    residual = xgb_pred - actual,
    pos_group = case_when(
      str_detect(pos, "G") ~ "G",
      str_detect(pos, "F") ~ "F",
      str_detect(pos, "C") ~ "C",
      TRUE ~ "Other"
    )
  ) |>
  #filter(residual > 0) |>
  mutate(
    across(c(actual, xgb_pred, residual), scales::dollar_format())
  )


unprotected_df <- ranked_pos_df |>
  filter(protected == 0)


library(dplyr)

top_residuals_by_pos <- ranked_pos_df |>
  mutate(
    residual_num = parse_number(gsub("[$,]", "", residual))  # remove $ and , before parsing
  ) |>
  group_by(pos_group) |>
  slice_max(order_by = residual_num, n = 10) |>
  arrange(pos_group, desc(residual_num)) |>
  select(player, pos, pos_group, actual, xgb_pred, residual, age)

top_residuals_by_pos


# adding a differnt decay for age 
draft_ranking <- read_csv("draft_ranking.csv")

draft_ranking <- draft_ranking |>
  mutate(
    actual = parse_number(actual),
    xgb_pred = parse_number(xgb_pred),
    residual = xgb_pred - actual,
    pos_group = case_when(
      str_detect(pos, "G") ~ "G",
      str_detect(pos, "F") ~ "F",
      str_detect(pos, "C") ~ "C",
      TRUE ~ "Other"
    )
  ) 

# Filter and summarize BEFORE formatting
target_players <- draft_ranking |>
  filter(residual > 0, protected == 0, 
         ufa == 0) |>
  group_by(pos_group) 

target_guards <- target_players |>
  filter(pos_group == "G") 

target_forwards <- target_players |>
  filter(pos_group == "F") 

# Format residuals for display
# summary_table |>
#   mutate(avg_residual = dollar(avg_residual))

```

```{r}
# summary_table |>
#   mutate(avg_residual = dollar(avg_residual))

undervalued_players <- draft_ranking |>
  filter(residual > 0, protected == 0) |>
  mutate(
    residual = dollar(residual),
    actual = dollar(actual),
    xgb_pred = dollar(xgb_pred)
  ) |>
  select(player, pos_group, residual, actual, xgb_pred) |>
  arrange(desc(residual))


```


# Making a results table
```{r}
library(dplyr)
library(gt)
library(scales)


selected_players <- c(
  "sug sutton", "maya caldwell", "julie vanloo", "marquesha davis",
  "kayla mcbride", "nyara sabally", "olivia nelson-ododa", "li yueru",
  "makayla timpson", "naz hillmon", "janelle salaun"
)

age_lookup <- tibble(
  player = c(
    "sug sutton", "maya caldwell", "julie vanloo", "kayla mcbride",
    "naz hillmon", "li yueru", "marquesha davis", "makayla timpson",
    "janelle salaun", "nyara sabally", "olivia nelson-ododa"
  ),
  Age = c(26, 26, 32, 33, 25, 26, 24, 22, 23, 25, 24)
)




selected_players <- age_lookup$player

# salary_table <- model_df_scaled |>
#   filter(tolower(player) %in% selected_players) |>
#   mutate(
#     actual   = as.numeric(actual),
#     xgb_pred = as.numeric(xgb_pred),
#     residual = as.numeric(residual),
#     Name     = str_to_title(player)
#   ) |>
#   left_join(age_lookup, by = "player") |>
#   arrange(desc(residual)) |>  # sort BEFORE formatting residual
#   mutate(
#   actual   = as.numeric(actual),
#   xgb_pred = as.numeric(xgb_pred),
#   residual = as.numeric(residual),
#   Name     = if_else(player == "kayla mcbride", "Kayla McBride", str_to_title(player))
# )
# 
#   select(
#     Name,
#     Age,
#     Position = pos,
#     Team = team,
#     `Actual Salary`,
#     `Predicted Salary`,
#     Residual
#   ) |>
#   Name = if_else(player == "kayla mcbride", "Kayla McBride", str_to_title(player)) |>
# gt() |>
# tab_header(
#   title = md("**Top Expansion Draft Prospects**")
# ) |>
# tab_style(
#   style = cell_text(weight = "bold", size = px(18)),
#   locations = cells_title(groups = "title")
# ) |>
#   cols_align(
#     align = "left",
#     columns = everything()
#   ) |>
#   tab_options(
#     table.font.size = 14,
#     heading.align = "center"
#   )
  
  
  
salary_table <- model_df_scaled |>
  filter(tolower(player) %in% selected_players) |>
  mutate(
    actual   = as.numeric(actual),
    xgb_pred = as.numeric(xgb_pred),
    residual = as.numeric(residual)
  ) |>
  left_join(age_lookup, by = "player") |>
  arrange(desc(residual)) |>
  mutate(
    Name = case_when(
      player == "kayla mcbride" ~ "Kayla McBride",
      TRUE ~ str_to_title(player)
    ),
    `Actual Salary`    = dollar(actual),
    `Predicted Salary` = dollar(xgb_pred),
    Residual           = dollar(residual)
  ) |>
  select(
    Name,
    Age,
    Position = pos,
    Team = team,
    `Actual Salary`,
    `Predicted Salary`,
    Residual
  ) |>
  gt() |>
  tab_header(
    title = md("**Top Expansion Draft Prospects**")
  ) |>
  tab_style(
    style = cell_text(weight = "bold", size = px(18)),
    locations = cells_title(groups = "title")
  ) |>
  cols_align(
    align = "left",
    columns = everything()
  ) |>
  tab_options(
    table.font.size = 14,
    heading.align = "center"
  )

salary_table



ggplot(eda_df, aes(x = per, y = salary_clean)) +
  # Highlight rookie salary range
  annotate("rect",
           xmin = -Inf, xmax = Inf,
           ymin = 66000, ymax = 78000,
           fill = "red", alpha = 0.15) +
  # Base scatter
  geom_point(alpha = 0.7, size = 3, color = "#1f78b4") +
  geom_label_repel(
    data = star_df,
    aes(label = player),
    size = 3.5,
    box.padding = 0.3,
    point.padding = 0.2,
    segment.color = "gray50",
    segment.size = 0.7,
    min.segment.length = 0,
    direction = "y",
    alpha = 0.7
  ) +
  # Lines at key salary thresholds
  geom_hline(yintercept = 66000,  linetype = "dashed", color = "red", alpha = 0.5) +
  geom_hline(yintercept = 78000,  linetype = "dashed", color = "red", alpha = 0.5) +
  geom_hline(yintercept = 214000, linetype = "dashed", color = "green") +
  geom_hline(yintercept = 250000, linetype = "dashed", color = "blue") +

  # Text labels
  annotate("text", x = 30, y = 72000,
           label = "Rookie Range ($66K–$78K)", color = "red4",
           size = 3, hjust = 0) +
  annotate("text", x = 1.5, y = 214000 + 3000,
           label = "Max ($214K)", color = "darkgreen",
           size = 3, hjust = 0) +
  annotate("text", x = 1.5, y = 250000 + 3000,
           label = "Supermax ($249K)", color = "blue",
           size = 3, hjust = 0) +

  labs(
    title = "Identifying Who May Be Outperforming Their Salary",
    x = "Player Efficiency Rating (PER)",
    y = "Salary (USD)"
  ) +
  scale_y_continuous(labels = dollar_format(),
                     breaks = seq(0, 300000, by = 40000)) +
  scale_x_continuous(breaks = seq(0, max(eda_df$per), by = 5),
                     limits = c(0, max(eda_df$per) + 5)) +
  theme_classic(base_size = 14) +
  theme(
    plot.title = element_text(face = "bold", size = 18),
    plot.subtitle = element_text(size = 12, margin = margin(b = 10)),
    axis.title = element_text(face = "bold")
  )


```


## Methods

Describe the modeling techniques you chose, their assumptions, justifications for why they are appropriate for the problem, and how you're comparing/evaluating the different methods.

## Results

Describe your results. This can include tables and plots showing your results, as well as text describing how your models worked and the appropriate interpretations of the relevant output. (Note: Don’t just write out the textbook interpretations of all model coefficients. Instead, interpret the output that is relevant for your question of interest that is framed in the introduction)

## Discussion

Give your conclusions and summarize what you have learned with regards to your question of interest. Are there any limitations with the approaches you used? What do you think are the next steps to follow-up your project?

## Appendix: A quick tutorial




```{r}

selected_players <- c(
  "sug sutton", "maya caldwell", "julie vanloo", "marquesha davis",
  "kayla mcbride", "nyara sabally", "olivia nelson-ododa", "li yueru",
  "makayla timpson", "naz hillmon", "janelle salaun"
)

ggplot(data = model_df_scaled, 
       aes(x = actual, y = xgb_pred, color = residual)) +
  geom_point(alpha = 0.7, size = 2) +
  geom_abline(slope = 1, intercept = 0, 
              linetype = "dashed", color = "gray40") +
  scale_x_continuous(labels = dollar_format(prefix = "$")) +
  scale_y_continuous(labels = dollar_format(prefix = "$")) +
  scale_color_gradient2(
    low = "firebrick",      # uverpaid
    mid = "gray80",           # fair
    high =  "forestgreen",       #underpaid
    midpoint = 0
   # name = "Estimated Team Savings"
  ) +
  labs(
    title = "XGBoost Predicted vs. Actual WNBA 2025 Salaries",
    x = "Actual 2025 Salary",
    y = "Predicted 2025 Salary"
  ) +
  theme_minimal(base_size = 15) +
  theme(
    plot.title = element_text(hjust = 0.5),
    axis.title = element_text(),
    legend.title = element_text()
  )

# Define character vector of selected player names
top_overvalued_names <- c(
  "makayla timpson", "naz hillmon", "nyara sabally", 
  "sug sutton", "maya caldwell", "marquesha davis", "janelle salaun"
)

# Filter your data to include just those players
top_overvalued_players <- model_df_scaled |>
  filter(player %in% top_overvalued_names) |>
  mutate(
    nudge_x = case_when(
      player == "makayla timpson" ~ -50000,
      player == "naz hillmon"     ~ -20000,
      player == "nyara sabally"   ~ 60000,
      player == "sug sutton"      ~ 0,
      player == "maya caldwell"   ~ -30000,
      player == "marquesha davis" ~ -50000,
      player == "janelle salaun"  ~ -50000,
      TRUE ~ 0
    ),
    nudge_y = case_when(
      player == "makayla timpson" ~ -8000,
      player == "naz hillmon"     ~ -10000,
      player == "nyara sabally"   ~ 0,
      player == "sug sutton"      ~ 40000,
      player == "maya caldwell"   ~ -20000,
      player == "marquesha davis" ~ 40000,
      player == "janelle salaun"  ~ 20000,
      TRUE ~ 0
    )
  )

ggplot(data = model_df_scaled, 
       aes(x = actual, y = xgb_pred, color = residual)) +
  geom_point(alpha = 0.7, size = 2) +
  geom_abline(slope = 1, intercept = 0, 
              linetype = "dashed", color = "gray40") +
  scale_x_continuous(labels = dollar_format(prefix = "$")) +
  scale_y_continuous(labels = dollar_format(prefix = "$")) +
  scale_color_gradient2(
    low = "firebrick", mid = "gray80", high = "forestgreen", midpoint = 0
  ) +
  labs(
    title = "Predicted vs. Actual WNBA 2025 Salaries",
    x = "Actual 2025 Salary",
    y = "Predicted 2025 Salary"
  ) +
  theme_classic(base_size = 15) +
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold"),
    axis.title = element_text(),
    legend.title = element_text()
  ) +
  # Add connecting lines
  geom_segment(data = top_overvalued_players,
               aes(x = actual, y = xgb_pred, 
                   xend = actual + nudge_x, yend = xgb_pred + nudge_y), 
               color = "grey", size = 1) +
  # Add labels
  geom_label(data = top_overvalued_players,
             aes(x = actual + nudge_x, y = xgb_pred + nudge_y, label = str_to_title(player)),
             color = "black", size = 4, label.padding = unit(0.3, "lines"))



```

