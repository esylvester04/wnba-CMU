---
title: "Research Report"
author:
  - Author 1
  - Author 2
  - Author 3
date: "July 25, 2025"
toc: true
format:
  html:
    theme: cosmo
    html-math-method: katex
    self-contained: true
execute:
  echo: false
  warning: false
  message: false
---

---

## Introduction 

Describe the problem and why it is important.

## Data

Describe the data you’re using in detail, where you accessed it, along with relevant exploratory data analysis (EDA). You should also include descriptions of any relevant data pre-processing steps (e.g., whether you consider specific observations, create any meaningful features, etc.---but don't mention minor steps like column type conversion, filtering out unnecessary rows)

```{r}
#| echo: false
library(dplyr)
library(janitor)
library(lubridate)
library(readr)
library(stringr)
library(stringi) 
library(tidyverse)
library(ggrepel)
library(scales)

# loading the data
model_df <- read_csv("salary_model_df.csv")
model_df_scaled <- read_csv("model_df_scaled.csv")
eda_df <- read_csv("eda_df.csv")
```

### EDA
```{r}
#| echo: false
#| results: false

# Define the nine star players to highlight
star_players <- c(
  "caitlin clark", "arike ogunbowale", "a'ja wilson",
  "breanna stewart", "aliyah boston", "sabrina ionescu",
  "napheesa collier", "paige bueckers", "kelsey plum"
)

# Filter the data for labeling
star_df <- eda_df %>% filter(player %in% star_players)

star_df <-star_df <- star_df %>%
  mutate(
    nudge_x = case_when(
      player == "arike ogunbowale"  ~ -2,
      player == "paige bueckers"    ~ 10,
      player == "kelsey plum"       ~ -20,
      TRUE                         ~ 0
    ),
    nudge_y = case_when(
      player == "arike ogunbowale"  ~ -5,
      player == "sabrina ionescu"   ~ 10,
      player == "napheesa collier"  ~ -5,
      player == "paige bueckers"    ~ 30,
      player == "kelsey plum"       ~ 10,
      TRUE                         ~ 0
    )
  )

ggplot(eda_df, aes(x = per, y = salary_clean)) +
  # Highlight rookie salary range
  annotate("rect",
           xmin = -Inf, xmax = Inf,
           ymin = 66000, ymax = 78000,
           fill = "red", alpha = 0.15) +
  # Base scatter
  geom_point(alpha = 0.7, size = 3, color = "#1f78b4") +
  geom_label_repel(
    data = star_df,
    aes(label = player),
    size = 3.5,
    box.padding = 0.3,
    point.padding = 0.2,
    segment.color = "gray50",
    segment.size = 0.7,
    min.segment.length = 0,
    direction = "y", # prefer vertical adjustment to avoid overlap
    alpha = 0.7
  ) +
  # Lines at key salary thresholds
  geom_hline(yintercept = 66000,  linetype = "dashed", color = "red", alpha = 0.5) +
  geom_hline(yintercept = 78000,  linetype = "dashed", color = "red", alpha = 0.5) +
  geom_hline(yintercept = 214000, linetype = "dashed", color = "green") +
  geom_hline(yintercept = 250000, linetype = "dashed", color = "blue") +
  labs(
    title = "Player Efficiency vs WNBA Salary 2025",
    x = "Player Efficiency Rating (PER)",
    y = "Salary (USD)",
  ) +
  scale_y_continuous(labels = dollar_format(),
                     breaks = seq(0, 300000, by = 40000)) +
  scale_x_continuous(breaks = seq(0, max(eda_df$per) + 5, by = 5),
                     limits = c(0, max(eda_df$per) + 10)) +
  theme_classic(base_size = 14) +
  theme(
    plot.title = element_text(face = "bold", size = 18),
    plot.subtitle = element_text(size = 12, margin = margin(b = 10)),
    axis.title = element_text(face = "bold")
  )

model_df |> distinct(pos)


library(readr)  
positional_df <- model_df |>
  mutate(
    actual = parse_number(actual),
    xgb_pred = parse_number(xgb_pred),
    residual = xgb_pred - actual,
    pos_group = case_when(
      str_detect(pos, "G") ~ "G",
      str_detect(pos, "F") ~ "F",
      str_detect(pos, "C") ~ "C",
      TRUE ~ "Other"
    )
  ) |>
  filter(residual > 0) |>
  mutate(
    across(c(actual, xgb_pred, residual), scales::dollar_format())
  )

ranked_df <- read_csv("players_ranked_salary_ufa.csv")

ranked_pos_df <- ranked_df|>
  mutate(
    actual = parse_number(actual),
    xgb_pred = parse_number(xgb_pred),
    residual = xgb_pred - actual,
    pos_group = case_when(
      str_detect(pos, "G") ~ "G",
      str_detect(pos, "F") ~ "F",
      str_detect(pos, "C") ~ "C",
      TRUE ~ "Other"
    )
  ) |>
  #filter(residual > 0) |>
  mutate(
    across(c(actual, xgb_pred, residual), scales::dollar_format())
  )


unprotected_df <- ranked_pos_df |>
  filter(protected == 0)


library(dplyr)

top_residuals_by_pos <- ranked_pos_df |>
  mutate(
    residual_num = parse_number(gsub("[$,]", "", residual))  # remove $ and , before parsing
  ) |>
  group_by(pos_group) |>
  slice_max(order_by = residual_num, n = 10) |>
  arrange(pos_group, desc(residual_num)) |>
  select(player, pos, pos_group, actual, xgb_pred, residual, age)

top_residuals_by_pos


# adding a differnt decay for age 
draft_ranking <- read_csv("draft_ranking.csv")

draft_ranking <- draft_ranking |>
  mutate(
    actual = parse_number(actual),
    xgb_pred = parse_number(xgb_pred),
    residual = xgb_pred - actual,
    pos_group = case_when(
      str_detect(pos, "G") ~ "G",
      str_detect(pos, "F") ~ "F",
      str_detect(pos, "C") ~ "C",
      TRUE ~ "Other"
    )
  ) 

# Filter and summarize BEFORE formatting
target_players <- draft_ranking |>
  filter(residual > 0, protected == 0, 
         ufa == 0) |>
  group_by(pos_group) 

target_guards <- target_players |>
  filter(pos_group == "G") 


# Format residuals for display
summary_table |>
  mutate(avg_residual = dollar(avg_residual))

```

```{r}
summary_table |>
  mutate(avg_residual = dollar(avg_residual))

undervalued_players <- draft_ranking |>
  filter(residual > 0, protected == 0) |>
  mutate(
    residual = dollar(residual),
    actual = dollar(actual),
    xgb_pred = dollar(xgb_pred)
  ) |>
  select(player, pos_group, residual, actual, xgb_pred) |>
  arrange(desc(residual))

```



## Methods

Describe the modeling techniques you chose, their assumptions, justifications for why they are appropriate for the problem, and how you're comparing/evaluating the different methods.

## Results

Describe your results. This can include tables and plots showing your results, as well as text describing how your models worked and the appropriate interpretations of the relevant output. (Note: Don’t just write out the textbook interpretations of all model coefficients. Instead, interpret the output that is relevant for your question of interest that is framed in the introduction)

## Discussion

Give your conclusions and summarize what you have learned with regards to your question of interest. Are there any limitations with the approaches you used? What do you think are the next steps to follow-up your project?

## Appendix: A quick tutorial



### Figures

If a code block produces a plot or figure, this figure will automatically be inserted inline in the report. That is, it will be inserted exactly where the code block is.

```{r}
#| fig-width: 5
#| fig-height: 3.5
#| fig-cap: "This is a caption. It should explain what's in the figure and what's interesting about it. For instance: There is a negative, strong linear correlation between miles per gallon and horsepower for US cars in the 1970s."

library(tidyverse)
mtcars |> 
  ggplot(aes(x = mpg, y = hp)) +
  geom_point() +
  labs(x = "Miles per gallon",
       y = "Horsepower")
```

Notice the use of `fig-width` and `fig-height` to control the figure's size (in inches). 
These control the sizes given to `R` when it generates the plot, so `R` proportionally adjusts the font sizes to be large enough.





```{r}

ggplot(data = model_df_scaled, 
       aes(x = actual, y = xgb_pred, color = residual)) +
  geom_point(alpha = 0.7, size = 2) +
  geom_abline(slope = 1, intercept = 0, 
              linetype = "dashed", color = "gray40") +
  scale_x_continuous(labels = dollar_format(prefix = "$")) +
  scale_y_continuous(labels = dollar_format(prefix = "$")) +
  scale_color_gradient2(
    low = "firebrick",      # uverpaid
    mid = "gray80",           # fair
    high =  "forestgreen",       #underpaid
    midpoint = 0
   # name = "Estimated Team Savings"
  ) +
  labs(
    title = "XGBoost Predicted vs. Actual WNBA 2025 Salaries",
    x = "Actual 2025 Salary",
    y = "Predicted 2025 Salary"
  ) +
  theme_minimal(base_size = 15) +
  theme(
    plot.title = element_text(hjust = 0.5),
    axis.title = element_text(),
    legend.title = element_text()
  )
```

