---
title: "Draft Smart: Identifying Hidden Value in WNBA Expansion"
author:
  - Ella Sylvester
  - Isabella Ferrandiz 		
  - Jada Douthit	
date: "July 25, 2025"
toc: true
format:
  html:
    theme: cosmo
    html-math-method: katex
    self-contained: true
execute:
  echo: false
  warning: false
  message: false
---

## Introduction 

Describe the problem and why it is important.

## Data

Describe the data you’re using in detail, where you accessed it, along with relevant exploratory data analysis (EDA). You should also include descriptions of any relevant data pre-processing steps (e.g., whether you consider specific observations, create any meaningful features, etc.---but don't mention minor steps like column type conversion, filtering out unnecessary rows)

### EDA

```{r}
# loading in the data
#| echo: false
#| echo: false
#| warning: false
#| results: false
library(dplyr)
library(janitor)
library(lubridate)
library(readr)
library(stringr)
library(stringi) 
library(tidyverse)
library(ggrepel)
library(scales)

# loading the data
model_df <- read_csv("salary_model_df.csv")
model_df_scaled <- read_csv("model_df_scaled.csv")
eda_df <- read_csv("eda_df.csv")
```

```{r}
#| echo: false
#| warning: false

#### PER / Salary EDA scatterplot: 
# Define the nine star players to highlight
star_players <- c(
  "caitlin clark", "arike ogunbowale", "a'ja wilson",
  "breanna stewart", "aliyah boston", "sabrina ionescu",
  "napheesa collier", "paige bueckers", "kelsey plum"
)

# Filter the data for labeling
star_df <- eda_df |> filter(player %in% star_players)

star_df <-star_df <- star_df |>
  mutate(
    nudge_x = case_when(
      player == "arike ogunbowale"  ~ -2,
      player == "paige bueckers"    ~ 10,
      player == "kelsey plum"       ~ -20,
      TRUE                         ~ 0
    ),
    nudge_y = case_when(
      player == "arike ogunbowale"  ~ -5,
      player == "sabrina ionescu"   ~ 10,
      player == "napheesa collier"  ~ -5,
      player == "paige bueckers"    ~ 30,
      player == "kelsey plum"       ~ 10,
      TRUE                         ~ 0
    )
  )

ggplot(eda_df, aes(x = per, 
                   y = salary_clean)) +
  #  rookie salary range
  annotate("rect",
           xmin = -Inf, xmax = Inf,
           ymin = 66000, ymax = 78000,
           fill = "red", alpha = 0.15) +
  geom_point(alpha = 0.7, size = 3, color = "#1f78b4") +
  geom_label_repel(
    data = star_df,
    aes(label = str_to_title(player)),
    size = 3.5,
    box.padding = 0.3,
    point.padding = 0.2,
    segment.color = "gray50",
    segment.size = 0.7,
    min.segment.length = 0,
    direction = "y",
    alpha = 0.7
  ) +
  # lines at key salary caps
  geom_hline(yintercept = 66000,  linetype = "dashed", color = "red", alpha = 0.5) +
  geom_hline(yintercept = 78000,  linetype = "dashed", color = "red", alpha = 0.5) +
  geom_hline(yintercept = 214000, linetype = "dashed", color = "green") +
  geom_hline(yintercept = 250000, linetype = "dashed", color = "blue") +

  # text labels
  annotate("text", x = 30, y = 72000,
           label = "Rookie Range ($66K–$78K)", color = "red4",
           size = 3, hjust = 0) +
  annotate("text", x = 1.5, y = 214000 + 3000,
           label = "Max ($214K)", color = "darkgreen",
           size = 3, hjust = 0) +
  annotate("text", x = 1.5, y = 250000 + 3000,
           label = "Supermax ($249K)", color = "blue",
           size = 3, hjust = 0) +

  labs(
    title = "Identifying Who May Be Outperforming Their Salary",
    x = "Player Efficiency Rating (PER)",
    y = "Salary (USD)"
  ) +
  scale_y_continuous(labels = dollar_format(),
                     breaks = seq(0, 300000, by = 40000)) +
  scale_x_continuous(breaks = seq(0, max(eda_df$per), by = 5),
                     limits = c(0, max(eda_df$per) + 5)) +
  theme_classic(base_size = 14) +
  theme(
    plot.title = element_text(face = "bold", size = 18),
    plot.subtitle = element_text(size = 12, margin = margin(b = 10)),
    axis.title = element_text(face = "bold")
  )
```


## Methods

Describe the modeling techniques you chose, their assumptions, justifications for why they are appropriate for the problem, and how you're comparing/evaluating the different methods.

## Results

Describe your results. This can include tables and plots showing your results, as well as text describing how your models worked and the appropriate interpretations of the relevant output. (Note: Don’t just write out the textbook interpretations of all model coefficients. Instead, interpret the output that is relevant for your question of interest that is framed in the introduction)

::: {.panel-tabset}
# Model Comparisons 

## Results table
```{r}
#| echo: false
#| warning: false

library(gt)

selected_players <- c(
  "sug sutton", "maya caldwell", "julie vanloo", "marquesha davis",
  "kayla mcbride", "nyara sabally", "olivia nelson-ododa", "li yueru",
  "makayla timpson", "naz hillmon", "janelle salaun"
)

age_lookup <- tibble(
  player = c(
    "sug sutton", "maya caldwell", "julie vanloo", "kayla mcbride",
    "naz hillmon", "li yueru", "marquesha davis", "makayla timpson",
    "janelle salaun", "nyara sabally", "olivia nelson-ododa"
  ),
  Age = c(26, 26, 32, 33, 25, 26, 24, 22, 23, 25, 24)
)
selected_players <- age_lookup$player

salary_table <- model_df_scaled |>
  filter(tolower(player) %in% selected_players) |>
  mutate(
    actual   = as.numeric(actual),
    xgb_pred = as.numeric(xgb_pred),
    residual = as.numeric(residual)
  ) |>
  left_join(age_lookup, by = "player") |>
  arrange(desc(residual)) |>
  mutate(
    Name = case_when(
      player == "kayla mcbride" ~ "Kayla McBride",
      TRUE ~ str_to_title(player)
    ),
    `Actual Salary`    = dollar(actual),
    `Predicted Salary` = dollar(xgb_pred),
    Residual           = dollar(residual)
  ) |>
  select(
    Name,
    Age,
    Position = pos,
    Team = team,
    `Actual Salary`,
    `Predicted Salary`,
    Residual
  ) |>
  gt() |>
  tab_header(
    title = md("**Top Expansion Draft Prospects**")
  ) |>
  tab_style(
    style = cell_text(weight = "bold", size = px(18)),
    locations = cells_title(groups = "title")
  ) |>
  cols_align(
    align = "left",
    columns = everything()
  ) |>
  tab_options(
    table.font.size = 14,
    heading.align = "center"
  )

salary_table
```

:::

## Discussion



```{r}
#| echo: false
#| warning: false
 
library(shiny)

draft_ranking <- read.csv("draft_ranking.csv")

# UI
ui <- fluidPage(
  titlePanel("2026 WNBA Expansion Draft Predicted Protection Status"),
  sidebarLayout(
    sidebarPanel(
      selectInput(
        inputId = "team_choice",
        label = "Select a Team:",
        choices = sort(unique(draft_ranking$team.x)),
        selected = sort(unique(draft_ranking$team.x))[1]
      )
    ),
    mainPanel(
      uiOutput("protection_table")
    )
  )
)

# Server
server <- function(input, output) {
  
  # Reactive filtered and cleaned data
  filtered_data <- reactive({
    draft_ranking %>%
      filter(team.x == input$team_choice) %>%
      mutate(
        player = str_to_title(player)  # Capitalize player names
      )
  })
  
  # Render two side-by-side tables
  output$protection_table <- renderUI({
    fluidRow(
      column(
        width = 6,
        h4("✅ Protected Players"),
        tableOutput("protected_table")
      ),
      column(
        width = 6,
        h4("❌ Unprotected Players"),
        tableOutput("unprotected_table")
      )
    )
  })
  
  output$protected_table <- renderTable({
    filtered_data() %>%
      filter(protected == 1) %>%
      mutate(age = as.integer(age)) %>%
      select(Player = player, Position = pos, Age = age)
  })
  
  output$unprotected_table <- renderTable({
    filtered_data() %>%
      filter(protected == 0) %>%
      mutate(age = as.integer(age)) %>%
      select(Player = player, Position = pos, Age = age)
  })
  
}

# Run the app
shinyApp(ui = ui, server = server)
```








Give your conclusions and summarize what you have learned with regards to your question of interest. Are there any limitations with the approaches you used? What do you think are the next steps to follow-up your project?









## Appendix: A quick tutorial

**(Feel free to remove this section when you submit)**


* Each item starts on a new line with an asterisk.
* Items should start on the beginning of the line.
* Leave blank lines after the end of the list so the list does not continue.



### Figures

If a code block produces a plot or figure, this figure will automatically be inserted inline in the report. That is, it will be inserted exactly where the code block is.

```{r}
#| fig-width: 5
#| fig-height: 3.5
#| fig-cap: "This is a caption. It should explain what's in the figure and what's interesting about it. For instance: There is a negative, strong linear correlation between miles per gallon and horsepower for US cars in the 1970s."

library(tidyverse)
mtcars |> 
  ggplot(aes(x = mpg, y = hp)) +
  geom_point() +
  labs(x = "Miles per gallon",
       y = "Horsepower")
```

